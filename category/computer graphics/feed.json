{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jager的工地 • All posts by \"computer graphics\" category",
    "description": "游戏开发",
    "home_page_url": "https://asdlkjqpwoei.github.io",
    "items": [
        {
            "id": "https://asdlkjqpwoei.github.io/2024/05/09/ComputerGraphics/",
            "url": "https://asdlkjqpwoei.github.io/2024/05/09/ComputerGraphics/",
            "title": "Computer Graphics Mathematics",
            "date_published": "2024-05-09T14:33:29.073Z",
            "content_html": "<h1 id=\"Cartesian-Coordinate-System-笛卡儿坐标系\"><a href=\"#Cartesian-Coordinate-System-笛卡儿坐标系\" class=\"headerlink\" title=\"Cartesian Coordinate System(笛卡儿坐标系)\"></a>Cartesian Coordinate System(笛卡儿坐标系)</h1><p>使用n个互相垂直的轴描述n维空间，其中的点代表着空间的位置。在高中数学中常用的皆为二维Cartesian坐标系，在游戏行业中，常用的为三维的Cartesian坐标系。</p>\n<p>手掌心朝上，无名指和小指蜷缩，食指和拇指伸直并且食指朝向自己身体的前方，中指垂直于手掌，将拇指指向设$x$轴，食指指向设为$y$轴，中指指向设为$z$轴，就是高中数学常用的二维Cartesian坐标系平面加上一条垂直该平面的轴直线。</p>\n<p>Game Engine Architecture(游戏引擎架构)书中的右手坐标系图是将食指朝向自己身体上方的图示。</p>\n<h1 id=\"矢量运算\"><a href=\"#矢量运算\" class=\"headerlink\" title=\"矢量运算\"></a>矢量运算</h1><h2 id=\"Magnitude-模\"><a href=\"#Magnitude-模\" class=\"headerlink\" title=\"Magnitude(模)\"></a>Magnitude(模)</h2><p>标量，代表矢量在空间中的长度。一般使用勾股定理计算矢量的模。</p>\n\n$$|a| = \\sqrt[]{{a_x}^2 + {{a_y}^2} + {{a_z}^2}}$$\n\n\n<h3 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h3><p>计算平方根通常会损耗性能，尽量使用模的平方。</p>\n<h2 id=\"Dot-Product-点积\"><a href=\"#Dot-Product-点积\" class=\"headerlink\" title=\"Dot Product(点积)\"></a>Dot Product(点积)</h2><p>别名：Scalar Product(标量积)或内积(Inner Product)</p>\n<p>$$\\vec{a} \\cdot \\vec{b} &#x3D; {a_x} {b_x} + {a_y} {b_y} + {a_z} {b_z}$$</p>\n<p>点积支持数学基本运算中的交换律和分配律。</p>\n<p>通常用来对比两个游戏对象的位置和朝向：</p>\n<ul>\n<li>$$\\vec{a} \\cdot \\vec{b} &#x3D; 1$$</li>\n</ul>\n<p>两个对象共线，并且朝向完全相同</p>\n<ul>\n<li>$$\\vec{a} \\cdot \\vec{b} &#x3D; -1$$</li>\n</ul>\n<p>两个对象共线，并且朝向完全相反。</p>\n<ul>\n<li>$$\\vec{a} \\cdot \\vec{b} &#x3D; 0$$</li>\n</ul>\n<p>两个对象的朝向相互垂直。</p>\n<ul>\n<li>$$\\vec{a} \\cdot \\vec{b} &gt; 0$$</li>\n</ul>\n<p>两个对象的朝向大致相同。</p>\n<ul>\n<li>$$\\vec{a} \\cdot \\vec{b} &lt; 0$$</li>\n</ul>\n<p>两个对象的朝向大致相反。</p>\n<h2 id=\"Cross-Product-叉积\"><a href=\"#Cross-Product-叉积\" class=\"headerlink\" title=\"Cross Product(叉积)\"></a>Cross Product(叉积)</h2><p>别名：Vector Product(矢量积)或Outer Product(外积)</p>\n<p>只定义于三维空间。结果是一个新的矢量，垂直于原来的两个参与运算的矢量。</p>\n<p>$$\\vec{a} \\times \\vec{b} &#x3D; ({a_y} {b_z} - {a_z} {b_y})\\vec{i} + ({a_z} {b_x} - {a_x} {b_z})\\vec{j} + ({a_x} {b_y} - {a_y} {b_x})\\vec{k} $$</p>\n<h3 id=\"叉积的模\"><a href=\"#叉积的模\" class=\"headerlink\" title=\"叉积的模\"></a>叉积的模</h3><p>$$|\\vec{a} \\times \\vec{b}| &#x3D; |\\vec{a}| |\\vec{b}| sin\\theta$$</p>\n<h1 id=\"Linear-Interpolation-LERP-线性插值\"><a href=\"#Linear-Interpolation-LERP-线性插值\" class=\"headerlink\" title=\"Linear Interpolation, LERP(线性插值)\"></a>Linear Interpolation, LERP(线性插值)</h1><p>用来计算两个已知点的中间点。</p>\n<p>$$LERP(\\vec{A}, \\vec{B}, \\beta) &#x3D; (1 - \\beta)\\vec{A} + \\beta\\vec{B} &#x3D; [(1 - \\beta)A_x + \\beta B_x, (1 - \\beta)A_y + \\beta B_y, (1 - \\beta)A_z + \\beta B_z], \\beta \\in [0,1]$$</p>\n<h1 id=\"Matrix-矩阵\"><a href=\"#Matrix-矩阵\" class=\"headerlink\" title=\"Matrix(矩阵)\"></a>Matrix(矩阵)</h1><p>由$m &#x2F;times n$个标量组成的长方形数组，矩阵可方便的表示线性变化，例如平移、旋转、缩放。</p>\n<p>行(Row)与横，列(Column)与竖、纵。</p>\n<h2 id=\"Special-Orthogonal-Matrix-特殊正交矩阵-Isotropic-Matrix-各向同性矩阵-Orthonormal-Matrix-标准正交矩阵\"><a href=\"#Special-Orthogonal-Matrix-特殊正交矩阵-Isotropic-Matrix-各向同性矩阵-Orthonormal-Matrix-标准正交矩阵\" class=\"headerlink\" title=\"Special Orthogonal Matrix(特殊正交矩阵), Isotropic Matrix(各向同性矩阵), Orthonormal Matrix(标准正交矩阵)\"></a>Special Orthogonal Matrix(特殊正交矩阵), Isotropic Matrix(各向同性矩阵), Orthonormal Matrix(标准正交矩阵)</h2><p>一种所有行矢量及列矢量均为单位矢量的$3 \\times 3$矩阵。</p>\n<h2 id=\"变换矩阵\"><a href=\"#变换矩阵\" class=\"headerlink\" title=\"变换矩阵\"></a>变换矩阵</h2><p>一种可表示三维变换的矩阵，包括平移、旋转、缩放。</p>\n<h2 id=\"Affine-Matrix-仿射矩阵\"><a href=\"#Affine-Matrix-仿射矩阵\" class=\"headerlink\" title=\"Affine Matrix(仿射矩阵)\"></a>Affine Matrix(仿射矩阵)</h2><p>能维持直线在变换前后的平行性以及相对的距离比，不一定维持直线在变换前后的绝对长度及角度的$4 \\times 4$变换矩阵。</p>\n<p>由平移、旋转、缩放、切变所组合而成的变换都是仿射矩阵。</p>\n<h1 id=\"Euler-Angle-欧拉角\"><a href=\"#Euler-Angle-欧拉角\" class=\"headerlink\" title=\"Euler Angle(欧拉角)\"></a>Euler Angle(欧拉角)</h1><ul>\n<li>Pitch(俯仰角)</li>\n<li>Yaw(偏航角)</li>\n<li>Roll(滚动角)</li>\n</ul>\n<h2 id=\"Gimbal-Lock-万向节死锁\"><a href=\"#Gimbal-Lock-万向节死锁\" class=\"headerlink\" title=\"Gimbal Lock(万向节死锁)\"></a>Gimbal Lock(万向节死锁)</h2><p>当旋转90度时，三个主轴中的其中一个主轴就会与另一个主轴完全对其，此时三个主轴的状态就叫做万向节死锁，其中两个主轴已经完全对其，无法在单独的围绕其中一个主轴旋转，因为二者已经等效。</p>\n<h1 id=\"Quaternion-四元数\"><a href=\"#Quaternion-四元数\" class=\"headerlink\" title=\"Quaternion(四元数)\"></a>Quaternion(四元数)</h1><h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li>Introduction to Linear Algebra [Fifth Edition] - Gilbert Strang</li>\n<li>Game Engine Architecture [Third Edition] – Jason Gergory, 叶劲峰译</li>\n</ol>\n",
            "tags": []
        }
    ]
}