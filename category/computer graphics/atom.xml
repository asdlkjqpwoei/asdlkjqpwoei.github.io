<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://asdlkjqpwoei.github.io</id>
    <title>Jager的工地 • Posts by &#34;computer graphics&#34; category</title>
    <link href="https://asdlkjqpwoei.github.io" />
    <updated>2023-06-28T08:57:10.586Z</updated>
    <entry>
        <id>https://asdlkjqpwoei.github.io/2023/06/28/ComputerGraphics/</id>
        <title>Computer Graphics Mathematics</title>
        <link rel="alternate" href="https://asdlkjqpwoei.github.io/2023/06/28/ComputerGraphics/"/>
        <content type="html">&lt;h1 id=&#34;Cartesian-Coordinate-System-笛卡儿坐标系&#34;&gt;&lt;a href=&#34;#Cartesian-Coordinate-System-笛卡儿坐标系&#34; class=&#34;headerlink&#34; title=&#34;Cartesian Coordinate System(笛卡儿坐标系)&#34;&gt;&lt;/a&gt;Cartesian Coordinate System(笛卡儿坐标系)&lt;/h1&gt;&lt;p&gt;使用n个互相垂直的轴描述n维空间，其中的点代表着空间的位置。在高中数学中常用的皆为二维Cartesian坐标系，在游戏行业中，常用的为三维的Cartesian坐标系。&lt;/p&gt;
&lt;p&gt;手掌心朝上，无名指和小指蜷缩，食指和拇指伸直并且食指朝向自己身体的前方，中指垂直于手掌，将拇指指向设为x轴，食指指向设为y轴，中指指向设为z轴，就是高中数学常用的二维Cartesian坐标系平面加上一条垂直该平面的轴直线。&lt;/p&gt;
&lt;p&gt;Game Engine Architecture(游戏引擎架构)书中的右手坐标系图是将食指朝向自己身体上方的图示。&lt;/p&gt;
&lt;h1 id=&#34;矢量运算&#34;&gt;&lt;a href=&#34;#矢量运算&#34; class=&#34;headerlink&#34; title=&#34;矢量运算&#34;&gt;&lt;/a&gt;矢量运算&lt;/h1&gt;&lt;h2 id=&#34;Magnitude-模&#34;&gt;&lt;a href=&#34;#Magnitude-模&#34; class=&#34;headerlink&#34; title=&#34;Magnitude(模)&#34;&gt;&lt;/a&gt;Magnitude(模)&lt;/h2&gt;&lt;p&gt;标量，代表矢量在空间中的长度。一般使用勾股定理计算矢量的模。&lt;/p&gt;

$$|a| = \sqrt[]{{a_x}^2 + {{a_y}^2} + {{a_z}^2}}$$


&lt;h3 id=&#34;Note&#34;&gt;&lt;a href=&#34;#Note&#34; class=&#34;headerlink&#34; title=&#34;Note&#34;&gt;&lt;/a&gt;Note&lt;/h3&gt;&lt;p&gt;计算平方根通常会损耗性能，尽量使用模的平方。&lt;/p&gt;
&lt;h2 id=&#34;Dot-Product-点积&#34;&gt;&lt;a href=&#34;#Dot-Product-点积&#34; class=&#34;headerlink&#34; title=&#34;Dot Product(点积)&#34;&gt;&lt;/a&gt;Dot Product(点积)&lt;/h2&gt;&lt;p&gt;别名：Scalar Product(标量积)或内积(Inner Product)&lt;/p&gt;
&lt;p&gt;$$\vec{a} \cdot \vec{b} &amp;#x3D; {a_x} {b_x} + {a_y} {b_y} + {a_z} {b_z}$$&lt;/p&gt;
&lt;p&gt;点积支持数学基本运算中的交换律和分配律。&lt;/p&gt;
&lt;p&gt;通常用来对比两个游戏对象的位置和朝向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\vec{a} \cdot \vec{b} &amp;#x3D; 1$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个对象共线，并且朝向完全相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\vec{a} \cdot \vec{b} &amp;#x3D; -1$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个对象共线，并且朝向完全相反。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\vec{a} \cdot \vec{b} &amp;#x3D; 0$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个对象的朝向相互垂直。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\vec{a} \cdot \vec{b} &amp;gt; 0$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个对象的朝向大致相同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$\vec{a} \cdot \vec{b} &amp;lt; 0$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个对象的朝向大致相反。&lt;/p&gt;
&lt;h2 id=&#34;Cross-Product-叉积&#34;&gt;&lt;a href=&#34;#Cross-Product-叉积&#34; class=&#34;headerlink&#34; title=&#34;Cross Product(叉积)&#34;&gt;&lt;/a&gt;Cross Product(叉积)&lt;/h2&gt;&lt;p&gt;别名：Vector Product(矢量积)或Outer Product(外积)&lt;/p&gt;
&lt;p&gt;只定义于三维空间。结果是一个新的矢量，垂直于原来的两个参与运算的矢量。&lt;/p&gt;
&lt;p&gt;$$\vec{a} \times \vec{b} &amp;#x3D; ({a_y} {b_z} - {a_z} {b_y})\vec{i} + ({a_z} {b_x} - {a_x} {b_z})\vec{j} + ({a_x} {b_y} - {a_y} {b_x})\vec{k} ]$$&lt;/p&gt;
&lt;h3 id=&#34;叉积的模&#34;&gt;&lt;a href=&#34;#叉积的模&#34; class=&#34;headerlink&#34; title=&#34;叉积的模&#34;&gt;&lt;/a&gt;叉积的模&lt;/h3&gt;&lt;p&gt;$$|\vec{a} \times \vec{b}| &amp;#x3D; |\vec{a}| |\vec{b}| sin\theta$$&lt;/p&gt;
&lt;h1 id=&#34;Linear-Interpolation-LERP-线性插值&#34;&gt;&lt;a href=&#34;#Linear-Interpolation-LERP-线性插值&#34; class=&#34;headerlink&#34; title=&#34;Linear Interpolation, LERP(线性插值)&#34;&gt;&lt;/a&gt;Linear Interpolation, LERP(线性插值)&lt;/h1&gt;&lt;p&gt;用来计算两个已知点的中间点。&lt;/p&gt;
&lt;p&gt;$$LERP(\vec{A}, \vec{B}, \beta) &amp;#x3D; (1 - \beta)\vec{A} + \beta\vec{B} &amp;#x3D; [(1 - \beta)A_x + \beta B_x, (1 - \beta)A_y + \beta B_y, (1 - \beta)A_z + \beta B_z], \beta \in [0,1]$$&lt;/p&gt;
&lt;h1 id=&#34;Matrix-矩阵&#34;&gt;&lt;a href=&#34;#Matrix-矩阵&#34; class=&#34;headerlink&#34; title=&#34;Matrix(矩阵)&#34;&gt;&lt;/a&gt;Matrix(矩阵)&lt;/h1&gt;&lt;p&gt;由$m &amp;#x2F;times n$个标量组成的长方形数组，矩阵可方便的表示线性变化，例如平移、旋转、缩放。&lt;/p&gt;
&lt;p&gt;行(Row)与横，列(Column)与竖、纵。&lt;/p&gt;
&lt;h2 id=&#34;Special-Orthogonal-Matrix-特殊正交矩阵-Isotropic-Matrix-各向同性矩阵-Orthonormal-Matrix-标准正交矩阵&#34;&gt;&lt;a href=&#34;#Special-Orthogonal-Matrix-特殊正交矩阵-Isotropic-Matrix-各向同性矩阵-Orthonormal-Matrix-标准正交矩阵&#34; class=&#34;headerlink&#34; title=&#34;Special Orthogonal Matrix(特殊正交矩阵), Isotropic Matrix(各向同性矩阵), Orthonormal Matrix(标准正交矩阵)&#34;&gt;&lt;/a&gt;Special Orthogonal Matrix(特殊正交矩阵), Isotropic Matrix(各向同性矩阵), Orthonormal Matrix(标准正交矩阵)&lt;/h2&gt;&lt;p&gt;一种所有行矢量及列矢量均为单位矢量的$3 \times 3$矩阵。&lt;/p&gt;
&lt;h2 id=&#34;变换矩阵&#34;&gt;&lt;a href=&#34;#变换矩阵&#34; class=&#34;headerlink&#34; title=&#34;变换矩阵&#34;&gt;&lt;/a&gt;变换矩阵&lt;/h2&gt;&lt;p&gt;一种可表示三维变换的矩阵，包括平移、旋转、缩放。&lt;/p&gt;
&lt;h2 id=&#34;Affine-Matrix-仿射矩阵&#34;&gt;&lt;a href=&#34;#Affine-Matrix-仿射矩阵&#34; class=&#34;headerlink&#34; title=&#34;Affine Matrix(仿射矩阵)&#34;&gt;&lt;/a&gt;Affine Matrix(仿射矩阵)&lt;/h2&gt;&lt;p&gt;能维持直线在变换前后的平行性以及相对的距离比，不一定维持直线在变换前后的绝对长度及角度的$4 \times 4$变换矩阵。&lt;/p&gt;
&lt;p&gt;由平移、旋转、缩放、切变所组合而成的变换都是仿射矩阵。&lt;/p&gt;
&lt;h1 id=&#34;Euler-Angle-欧拉角&#34;&gt;&lt;a href=&#34;#Euler-Angle-欧拉角&#34; class=&#34;headerlink&#34; title=&#34;Euler Angle(欧拉角)&#34;&gt;&lt;/a&gt;Euler Angle(欧拉角)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Pitch(俯仰角)&lt;/li&gt;
&lt;li&gt;Yaw(偏航角)&lt;/li&gt;
&lt;li&gt;Roll(滚动角)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Gimbal-Lock-万向节死锁&#34;&gt;&lt;a href=&#34;#Gimbal-Lock-万向节死锁&#34; class=&#34;headerlink&#34; title=&#34;Gimbal Lock(万向节死锁)&#34;&gt;&lt;/a&gt;Gimbal Lock(万向节死锁)&lt;/h2&gt;&lt;p&gt;当旋转90度时，三个主轴中的其中一个主轴就会与另一个主轴完全对其，此时三个主轴的状态就叫做万向节死锁，其中两个主轴已经完全对其，无法在单独的围绕其中一个主轴旋转，因为二者已经等效。&lt;/p&gt;
&lt;h1 id=&#34;Quaternion-四元数&#34;&gt;&lt;a href=&#34;#Quaternion-四元数&#34; class=&#34;headerlink&#34; title=&#34;Quaternion(四元数)&#34;&gt;&lt;/a&gt;Quaternion(四元数)&lt;/h1&gt;&lt;h1 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Introduction to Linear Algebra [Fifth Edition] - Gilbert Strang&lt;/li&gt;
&lt;li&gt;Game Engine Architecture [Third Edition] – Jason Gergory, 叶劲峰译&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-06-28T08:57:10.586Z</updated>
    </entry>
</feed>
