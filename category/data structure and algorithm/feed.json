{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jager的工地 • All posts by \"data structure and algorithm\" category",
    "description": "游戏开发",
    "home_page_url": "https://asdlkjqpwoei.github.io",
    "items": [
        {
            "id": "https://asdlkjqpwoei.github.io/2024/05/09/DataStructrue/",
            "url": "https://asdlkjqpwoei.github.io/2024/05/09/DataStructrue/",
            "title": "Data Structrue",
            "date_published": "2024-05-09T14:33:29.076Z",
            "content_html": "<h1 id=\"Linked-List-链表\"><a href=\"#Linked-List-链表\" class=\"headerlink\" title=\"Linked List(链表)\"></a>Linked List(链表)</h1><p>线性结构，与数组的区别是可以不连续存储，链表变换时不必移动一整块内存。元素的顺序一般由链表对象中的指针决定。</p>\n<p>搜索链表在最坏情况下的运行时间为$\\theta(n)$。</p>\n<p>插入一个元素进入链表的运行时间一般为$\\theta(1)$</p>\n<p>删除一个链表中的元素的运行时间一般为$\\theta(1)$</p>\n<h2 id=\"Singly-Linked-List-单向链表\"><a href=\"#Singly-Linked-List-单向链表\" class=\"headerlink\" title=\"Singly Linked List(单向链表)\"></a>Singly Linked List(单向链表)</h2><p>链表中元素的指针仅包含指向下一个元素的指针。</p>\n<h2 id=\"Doubly-Linked-List-双向链表\"><a href=\"#Doubly-Linked-List-双向链表\" class=\"headerlink\" title=\"Doubly Linked List(双向链表)\"></a>Doubly Linked List(双向链表)</h2><p>链表中元素的指针包含指向下一个元素的指针和上一个元素的指针</p>\n<h2 id=\"Circular-Linked-List-双向循环链表\"><a href=\"#Circular-Linked-List-双向循环链表\" class=\"headerlink\" title=\"Circular Linked List(双向循环链表)\"></a>Circular Linked List(双向循环链表)</h2><p>包含双向链表的特性，但是链表的头元素会包含一个指向尾元素的指针，尾元素的指针包含一个指向头元素的指针。</p>\n<h1 id=\"Stack-栈\"><a href=\"#Stack-栈\" class=\"headerlink\" title=\"Stack(栈)\"></a>Stack(栈)</h1><p>线性结构，但是后进先出(Last-In First-Out, LIFO)的线性结构，仅在结构的一端进行动作。</p>\n<p>栈的插入操作被称为压入(Push)，而删除操作被称为弹出(Pop)，且一般在实际的实现中不要求参数。</p>\n<p>试图对空栈执行弹出成为栈下溢(Underflow)，对已满的栈执行压入称为栈上溢(Overflow)。</p>\n<p>查询、压入、弹出的运行时间均为$\\theta(1)$</p>\n<h1 id=\"Queue-队列\"><a href=\"#Queue-队列\" class=\"headerlink\" title=\"Queue(队列)\"></a>Queue(队列)</h1><p>线性结构，但是先进先出(First-In First-Out, FIFO)的线性结构，在结构的两端进行动作。</p>\n<p>队列的插入操作被称为入队(Enqueue)，而删除操作被称为出队(Dequeue)，且一般在实际的实现中不要求参数。</p>\n<p>队列下溢是指试图对空队列执行出队，队列上溢是指试图对已满队列执行入队。</p>\n<p>入队、出队的运行时间均为$\\theta(1)$。</p>\n<h1 id=\"Hash-哈希表，散列表\"><a href=\"#Hash-哈希表，散列表\" class=\"headerlink\" title=\"Hash(哈希表，散列表)\"></a>Hash(哈希表，散列表)</h1><p>以常数平均时间执行插入、删除、查找的数据结构。该数据结构的元素被映射到从0至表的大小-1这个范围中的某个数，并且被放到相应的结构单元中，这个过程由散列函数(Hash Function)负责。这个过程中会不可避免地遇到散列值冲突的问题，如果碰上表的大小和元素具有一些不理想的性质，那么散列函数还需要处理这些性质带来的问题。</p>\n<h2 id=\"Separate-Chaining-分离链接\"><a href=\"#Separate-Chaining-分离链接\" class=\"headerlink\" title=\"Separate Chaining(分离链接)\"></a>Separate Chaining(分离链接)</h2><p>将散列到同一个散列值的元素用一个链表保存</p>\n<h2 id=\"Open-Addressing-开放定址\"><a href=\"#Open-Addressing-开放定址\" class=\"headerlink\" title=\"Open Addressing(开放定址)\"></a>Open Addressing(开放定址)</h2><h1 id=\"Binary-Tree-二叉搜索树\"><a href=\"#Binary-Tree-二叉搜索树\" class=\"headerlink\" title=\"Binary Tree(二叉搜索树)\"></a>Binary Tree(二叉搜索树)</h1><h1 id=\"Splay-Tree-伸展树\"><a href=\"#Splay-Tree-伸展树\" class=\"headerlink\" title=\"Splay Tree(伸展树)\"></a>Splay Tree(伸展树)</h1><h1 id=\"B-Tree-B树\"><a href=\"#B-Tree-B树\" class=\"headerlink\" title=\"B-Tree(B树)\"></a>B-Tree(B树)</h1><h1 id=\"Self-Balancing-Binary-Tree-自平衡二叉树\"><a href=\"#Self-Balancing-Binary-Tree-自平衡二叉树\" class=\"headerlink\" title=\"Self-Balancing Binary Tree(自平衡二叉树)\"></a>Self-Balancing Binary Tree(自平衡二叉树)</h1><h2 id=\"Single-Rotation-单旋转\"><a href=\"#Single-Rotation-单旋转\" class=\"headerlink\" title=\"Single Rotation(单旋转)\"></a>Single Rotation(单旋转)</h2><h2 id=\"Double-Rotation-双旋转\"><a href=\"#Double-Rotation-双旋转\" class=\"headerlink\" title=\"Double Rotation(双旋转)\"></a>Double Rotation(双旋转)</h2><h1 id=\"Red-Black-Tree-红黑树\"><a href=\"#Red-Black-Tree-红黑树\" class=\"headerlink\" title=\"Red Black Tree(红黑树)\"></a>Red Black Tree(红黑树)</h1><h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li>Data Structures and Algorithm Analysis in C [Second Edition] - Mark Allen Weiss, 冯舜玺译</li>\n<li>Introduction to Algorithm [Third Edition] - Thomas H.Cormen, Charles E.Leiserson, Ronald L. Rivest, Clifford Stein, 殷建平、徐云、王刚、刘晓光、苏明、邹恒明、王宏志译</li>\n</ol>\n",
            "tags": []
        }
    ]
}